<html>
  <head></head>
  <body>
    <input>
  </body>
  <script>
    // Hosted field stub. This listens for window events and passes back
    window.inputElement = document.querySelector('input');
    window.inputValue = '';
    window._config = undefined;

    var prefix;
    if (config().elementId) {
      window.name = 'recurly-element:stub';
      prefix = 'element:' + config().elementId;
    } else {
      window.name = 'recurlyHostedField:stub';
      prefix = 'hostedField';
    }

    // Stub broker behavior
    if (config().type === 'number') {
      window.addEventListener('message', receivePostMessage, false);
    }

    sendMessage(prefix + ':ready', { type: config().type });

    function receivePostMessage (event) {
      var name = event.data.event;
      if (name === 'token:init') {
        onToken(event.data.body);
      // HostedField uses ':configure', Element uses ':configure!'
      } else if (~[prefix + ':configure', prefix + ':configure!'].indexOf(name)) {
        onConfigure(event.data.body);
      }
    }

    // Event handlers

    function onToken (body) {
      var recurly = new parent.recurly.Recurly(getRecurlyConfig());
      var inputs = body.inputs;
      var id = body.id;

      for (var i = 0; i < window.parent.frames.length; i++) {
        var frame = window.parent.frames[i].contentWindow || window.parent.frames[i];
        inputs[frame.config().type] = frame.value();
      }

      recurly.token(inputs, function send (err, token) {
        sendMessage('token:done:' + id, { err: err, token: token });
      });
    }

    function onConfigure (newConfig) {
      if (newConfig.type !== config().type) return;
      window._config = newConfig;
    }

    // Utility

    function sendMessage (name, body) {
      if (!window.parent) return;
      var groupId = config().busGroupId;
      window.parent.postMessage({ event: name, body: body, groupId: groupId }, '*');
    }

    function getRecurlyConfig () {
      var queryConfig = config().recurly;
      queryConfig.parent = false;
      return queryConfig;
    }

    function config () {
      if (window._config) return window._config;
      var query = window.location.hash;
      return window._config = JSON.parse(decodeURIComponent(query.substring(query.indexOf('config=') + 7)) || {});
    }

    function value (newValue) {
      if (typeof newValue !== 'undefined') window.inputValue = newValue + '';
      inputElement.value = window.inputValue;
      return window.inputValue;
    }
  </script>
</html>
